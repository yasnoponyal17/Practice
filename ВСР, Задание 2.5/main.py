import asyncio
import logging
import sys
import os
import random
import sqlite3
from datetime import datetime, UTC
from dataclasses import dataclass
import calendar
from typing import Any, Self
from enum import Enum

from dateutil.relativedelta import relativedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, ReplyKeyboardRemove, BotCommand, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from pyowm.config import DEFAULT_CONFIG as OWM_DEFAULT_CONFIG
from pyowm import OWM
from pyowm.weatherapi25.weather import Weather
from pyowm.weatherapi25.location import Location
from pyowm.commons.exceptions import NotFoundError as OwmNotFoundError

with open("./telegram_token.txt", "r") as f:
    TELEGRAM_TOKEN = f.read()
    
with open("./owm_token.txt", "r") as f:
    OWM_TOKEN = f.read()

OWM_CONFIG = OWM_DEFAULT_CONFIG | {
    'language': 'ru'
}

COUNTRY_CODE_TO_COUNTRY_NAME = {
    'AF': '–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω',
    'AL': '–ê–ª–±–∞–Ω–∏—è',
    'DZ': '–ê–ª–∂–∏—Ä',
    'AS': '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –°–∞–º–æ–∞',
    'AD': '–ê–Ω–¥–æ—Ä—Ä–∞',
    'AO': '–ê–Ω–≥–æ–ª–∞',
    'AI': '–ê–Ω–≥–∏–ª—å—è',
    'AQ': '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–∫–∞',
    'AG': '–ê–Ω—Ç–∏–≥—É–∞ –∏ –ë–∞—Ä–±—É–¥–∞',
    'AR': '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞',
    'AM': '–ê—Ä–º–µ–Ω–∏—è',
    'AW': '–ê—Ä—É–±–∞',
    'AU': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    'AT': '–ê–≤—Å—Ç—Ä–∏—è',
    'AZ': '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω',
    'BS': '–ë–∞–≥–∞–º—ã',
    'BH': '–ë–∞—Ö—Ä–µ–π–Ω',
    'BD': '–ë–∞–Ω–≥–ª–∞–¥–µ—à—å',
    'BB': '–ë–∞—Ä–±–∞–¥–æ—Å',
    'BY': '–ë–µ–ª–∞—Ä—É—Å—å',
    'BE': '–ë–µ–ª—å–≥–∏—è',
    'BZ': '–ë–µ–ª–∏–∑',
    'BJ': '–ë–µ–Ω–∏–Ω',
    'BM': '–ë–µ—Ä–º—É–¥—ã',
    'BT': '–ë—É—Ç–∞–Ω',
    'BO': 'Bolivia',
    'BQ': '–ë–æ–Ω—ç–π—Ä',
    'BA': '–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞',
    'BW': '–ë–æ—Ç—Å–≤–∞–Ω–∞',
    'BV': '–û—Å—Ç—Ä–æ–≤ –ë—É–≤–µ',
    'BR': '–ë—Ä–∞–∑–∏–ª–∏—è',
    'IO': '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤ –ò–Ω–¥–∏–π—Å–∫–æ–º –æ–∫–µ–∞–Ω–µ',
    'BN': '–ë—Ä—É–Ω–µ–π',
    'BG': '–ë–æ–ª–≥–∞—Ä–∏—è',
    'BF': '–ë—É—Ä–∫–∏–Ω–∞-–§–∞—Å–æ',
    'BI': '–ë—É—Ä—É–Ω–¥–∏',
    'KH': '–ö–∞–º–±–æ–¥–∂–∞',
    'CM': '–ö–∞–º–µ—Ä—É–Ω',
    'CA': '–ö–∞–Ω–∞–¥–∞',
    'CV': '–ö–∞–±–æ-–í–µ—Ä–¥–µ',
    'KY': '–û—Å—Ç—Ä–æ–≤–∞ –ö–∞–π–º–∞–Ω',
    'CF': '–¶–ê–†',
    'TD': '–ß–∞–¥',
    'CL': '–ß–∏–ª–∏',
    'CN': '–ö–∏—Ç–∞–π',
    'CX': '–û—Å—Ç—Ä–æ–≤ –†–æ–∂–¥–µ—Å—Ç–≤–∞',
    'CC': '–ö–æ–∫–æ—Å–æ–≤—ã–µ –æ—Å—Ç—Ä–æ–≤–∞',
    'CO': '–ö–æ–ª—É–º–±–∏—è',
    'KM': '–ö–æ–º–æ—Ä—ã',
    'CG': '–ö–æ–Ω–≥–æ',
    'CD': '–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ',
    'CK': '–û—Å—Ç—Ä–æ–≤–∞ –ö—É–∫–∞',
    'CR': '–ö–æ—Å—Ç–∞-–†–∏–∫–∞',
    'HR': '–•–æ—Ä–≤–∞—Ç–∏—è',
    'CU': '–ö—É–±–∞',
    'CW': '–ö—é—Ä–∞—Å–∞–æ',
    'CY': '–ö–∏–ø—Ä',
    'CZ': '–ß–µ—Ö–∏—è',
    'CI': "–ö–æ—Ç-–¥'–ò–≤—É–∞—Ä",
    'DK': '–î–∞–Ω–∏—è',
    'DJ': '–î–∂–∏–±—É—Ç–∏',
    'DM': '–î–æ–º–∏–Ω–∏–∫–∞',
    'DO': '–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞',
    'EC': '–≠–∫–≤–∞–¥–æ—Ä',
    'EG': '–ï–≥–∏–ø—Ç',
    'SV': '–°–∞–ª—å–≤–∞–¥–æ—Ä',
    'GQ': 'Equatorial Guinea',
    'ER': 'Eritrea',
    'EE': '–≠—Å—Ç–æ–Ω–∏—è',
    'ET': '–≠—Ñ–∏–æ–ø–∏—è',
    'FK': '–§–æ–ª–∫–ª–µ–Ω–¥—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
    'FO': '–§–∞—Ä–µ—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
    'FJ': '–§–∏–¥–∂–∏',
    'FI': '–§–∏–Ω–ª—è–Ω–¥–∏—è',
    'FR': '–§—Ä–∞–Ω—Ü–∏—è',
    'GF': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ì–≤–∏–∞–Ω–∞',
    'PF': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ü–æ–ª–∏–Ω–µ–∑–∏—è',
    'TF': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –Æ–∂–Ω—ã–µ –∏ –ê–Ω—Ç–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–µ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
    'GA': '–ì–∞–±–æ–Ω',
    'GM': '–ì–∞–º–±–∏—è',
    'GE': '–ì—Ä—É–∑–∏—è',
    'DE': '–ì–µ—Ä–º–∞–Ω–∏—è',
    'GH': '–ì–∞–Ω–∞',
    'GI': '–ì–∏–±—Ä–∞–ª—Ç–∞—Ä',
    'GR': '–ì—Ä–µ—Ü–∏—è',
    'GL': '–ì—Ä–µ–Ω–ª–∞–Ω–¥–∏—è',
    'GD': '–ì—Ä–µ–Ω–∞–¥–∞',
    'GP': '–ì–≤–∞–¥–µ–ª—É–ø–∞',
    'GU': '–ì—É–∞–º',
    'GT': '–ì–≤–∞—Ç–µ–º–∞–ª–∞',
    'GG': '–ì–µ—Ä–Ω—Å–∏',
    'GN': '–ì–≤–∏–Ω–µ—è',
    'GW': '–ì–≤–∏–Ω–µ—è-–ë–∏—Å–∞—É',
    'GY': '–ì–∞–π–∞–Ω–∞',
    'HT': '–ì–∞–∏—Ç–∏',
    'HM': '–û—Å—Ç—Ä–æ–≤ –•–µ—Ä–¥ –∏ –æ—Å—Ç—Ä–æ–≤ –ú–∞–∫–¥–æ–Ω–∞–ª—å–¥',
    'VA': '–ü–∞–ø—Å–∫–∏–π –ü—Ä–µ—Å—Ç–æ–ª (–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ-–≥–æ—Ä–æ–¥ –í–∞—Ç–∏–∫–∞–Ω)',
    'HN': '–ì–∞–Ω–¥—É—Ä–∞—Å',
    'HK': '–ì–æ–Ω–∫ –ö–æ–Ω–≥',
    'HU': '–í–µ–Ω–≥—Ä–∏—è',
    'IS': '–ò—Å–ª–∞–Ω–¥–∏—è',
    'IN': '–ò–Ω–¥–∏—è',
    'ID': '–ò–Ω–¥–æ–Ω–µ–∑–∏—è',
    'IR': '–ò—Ä–∞–Ω',
    'IQ': '–ò—Ä–∞–∫',
    'IE': '–ò—Ä–ª–∞–Ω–¥–∏—è',
    'IM': '–æ—Å—Ç—Ä–æ–≤ –ú—ç–Ω',
    'IL': '–ò–∑—Ä–∞–∏–ª—å',
    'IT': '–ò—Ç–∞–ª–∏—è',
    'JM': '–Ø–º–∞–π–∫–∞',
    'JP': '–Ø–ø–æ–Ω–∏—è',
    'JE': '–î–∂–µ—Ä—Å–∏',
    'JO': '–ò–æ—Ä–¥–∞–Ω–∏—è',
    'KZ': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    'KE': '–ö–µ–Ω–∏—è',
    'KI': '–ö–∏—Ä–∏–±–∞—Ç–∏',
    'KP': "–ö–ù–î–†",
    'KR': '–ö–æ—Ä–µ—è',
    'KW': '–ö—É–≤–µ–π—Ç',
    'KG': '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω',
    'LA': "–õ–∞–æ—Å",
    'LV': '–õ–∞—Ç–≤–∏—è',
    'LB': '–õ–∏–≤–∞–Ω',
    'LS': '–õ–µ—Å–æ—Ç–æ',
    'LR': '–õ–∏–±–µ—Ä–∏—è',
    'LY': '–õ–∏–≤–∏—è',
    'LI': '–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω',
    'LT': '–õ–∏—Ç–≤–∞',
    'LU': '–õ—é–∫—Å–µ–º–±—É—Ä–≥',
    'MO': '–ú–∞–∫–∞–æ',
    'MK': '–ú–∞–∫–µ–¥–æ–Ω–∏—è',
    'MG': '–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä',
    'MW': '–ú–∞–ª–∞–≤–∏',
    'MY': '–ú–∞–ª–∞–π–∑–∏—è',
    'MV': '–ú–∞–ª—å–¥–∏–≤—ã',
    'ML': '–ú–∞–ª–∏',
    'MT': '–ú–∞–ª—å—Ç–∞',
    'MH': '–ú–∞—Ä—à–∞–ª–ª–æ–≤—ã –æ—Å—Ç—Ä–æ–≤–∞',
    'MQ': '–ú–∞—Ä—Ç–∏–Ω–∏–∫–∞',
    'MR': '–ú–∞–≤—Ä–∏—Ç–∞–Ω–∏—è',
    'MU': '–ú–∞–≤—Ä–∏–∫–∏–π',
    'YT': '–ú–∞–π–æ—Ç—Ç–∞',
    'MX': '–ú–µ–∫—Å–∏–∫–∞',
    'FM': '–ú–∏–∫—Ä–æ–Ω–µ–∑–∏—è',
    'MD': '–ú–æ–ª–¥–æ–≤–∞',
    'MC': '–ú–æ–Ω–∞–∫–æ',
    'MN': '–ú–æ–Ω–≥–æ–ª–∏—è',
    'ME': '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è',
    'MS': 'Montserrat',
    'MA': '–ú–æ—Ä–æ–∫–∫–æ',
    'MZ': '–ú–æ–∑–∞–º–±–∏–∫',
    'MM': '–ú—å—è–Ω–º–∞ (–ë–∏—Ä–º–∞)',
    'NA': '–ù–∞–º–∏–±–∏—è',
    'NR': '–ù–∞—É—Ä—É',
    'NP': '–ù–µ–ø–∞–ª',
    'NL': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
    'NC': '–ù–æ–≤–∞—è –ö–∞–ª–µ–¥–æ–Ω–∏—è',
    'NZ': '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è',
    'NI': '–ù–∏–∫–∞—Ä–∞–≥—É–∞',
    'NE': '–ù–∏–≥–µ—Ä',
    'NG': '–ù–∏–≥–µ—Ä–∏—è',
    'NU': '–ù–∏—É—ç',
    'NF': '–û—Å—Ç—Ä–æ–≤–∞ –ù–æ—Ä—Ñ–æ–ª–∫',
    'MP': '–°–µ–≤–µ—Ä–Ω—ã–µ –ú–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
    'NO': '–ù–æ—Ä–≤–µ–≥–∏—è',
    'OM': '–û–º–∞–Ω',
    'PK': '–ü–∞–∫–∏—Å—Ç–∞–Ω',
    'PW': '–ü–∞–ª–∞—É',
    'PS': '–ü–∞–ª–µ—Å—Ç–∏–Ω–∞',
    'PA': '–ü–∞–Ω–∞–º–∞',
    'PG': '–ü–∞–ø—É–∞ –ù–æ–≤–∞—è –ì–≤–∏–Ω–µ—è',
    'PY': '–ü–∞—Ä–∞–≥–≤–∞–π',
    'PE': '–ü–µ—Ä—É',
    'PH': '–§–∏–ª–∏–ø–∏–Ω—ã',
    'PN': '–æ—Å—Ç—Ä–æ–≤–∞ –ü–∏—Ç–∫—ç—Ä–Ω',
    'PL': '–ü–æ–ª—å—à–∞',
    'PT': '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
    'PR': '–ü—É—ç—Ä—Ç–æ-–†–∏–∫–æ',
    'QA': '–ö–∞—Ç–∞—Ä',
    'RO': '–†—É–º—ã–Ω–∏—è',
    'RU': '–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è',
    'RW': '–†—É–∞–Ω–¥–∞',
    'RE': '–†–µ—é–Ω—å–æ–Ω',
    'BL': '–°–∞–Ω-–ë–∞—Ä—Ç–µ–ª–µ–º–∏',
    'SH': '–æ—Å—Ç—Ä–æ–≤ –°–≤—è—Ç–æ–π –ï–ª–µ–Ω—ã',
    'KN': '–°–µ–Ω—Ç-–ö–∏—Ç—Å –∏ –ù–µ–≤–∏—Å',
    'LC': '–°–µ–Ω—Ç-–õ—é—Å–∏—è',
    'MF': '–°–µ–Ω-–ú–µ—Ä—Ç–µ–Ω',
    'PM': '–°–µ–Ω-–ü—å–µ—Ä –∏ –ú–∏–∫–µ–ª–æ–Ω',
    'VC': '–°–µ–Ω—Ç-–í–∏–Ω—Å–µ–Ω—Ç –∏ –ì—Ä–µ–Ω–∞–¥–∏–Ω—ã',
    'WS': '–°–∞–º–æ–∞',
    'SM': '–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ',
    'ST': '–°–∞–Ω-–¢–æ–º–µ –∏ –ü—Ä–∏–Ω—Å–∏–ø–∏',
    'SA': '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–±–∏—è',
    'SN': '–°–µ–Ω–µ–≥–∞–ª',
    'RS': '–°–µ—Ä–±–∏—è',
    'SC': '–°–µ–π—à–µ–ª–ª—ã',
    'SL': '–°—å–µ—Ä—Ä–∞-–õ–µ–æ–Ω–µ',
    'SG': '–°–∏–Ω–≥–∞–ø—É—Ä',
    'SX': '–°–∏–Ω—Ç-–ú–∞—Ä—Ç–µ–Ω',
    'SK': '–°–ª–æ–≤–∞–∫–∏—è',
    'SI': '–°–ª–æ–≤–µ–Ω–∏—è',
    'SB': '–°–æ–ª–æ–º–æ–Ω–æ–≤—ã –æ—Å—Ç—Ä–æ–≤–∞',
    'SO': '–°–æ–º–∞–ª–∏',
    'ZA': '–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞',
    'GS': '–Æ–∂–Ω–∞—è –ì–µ–æ—Ä–≥–∏—è –∏ –Æ–∂–Ω—ã–µ –°–∞–Ω–¥–≤–∏—á–µ–≤—ã –æ—Å—Ç—Ä–æ–≤–∞',
    'SS': '–Æ–∂–Ω—ã–π –°—É–¥–∞–Ω',
    'ES': '–ò—Å–ø–∞–Ω–∏—è',
    'LK': '–®—Ä–∏ –õ–∞–Ω–∫–∞',
    'SD': '–°—É–¥–∞–Ω',
    'SR': '–°—É—Ä–∏–Ω–∞–º',
    'SJ': '–®–ø–∏—Ü–±–µ—Ä–≥–µ–Ω –∏ –Ø–Ω-–ú–∞–π–µ–Ω',
    'SZ': '–≠—Å–≤–∞—Ç–∏–Ω–∏',
    'SE': '–®–≤–µ—Ü–∏—è',
    'CH': '–®–≤–µ–π—Ü–∞—Ä–∏—è',
    'SY': '–°–∏—Ä–∏—è',
    'TW': '–¢–∞–π–≤–∞–Ω—å',
    'TJ': '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
    'TZ': '–¢–∞–Ω–∑–∞–Ω–∏—è',
    'TH': '–¢–∞–π–ª–∞–Ω–¥',
    'TL': '–í–æ—Å—Ç–æ—á–Ω—ã–π –¢–∏–º–æ—Ä',
    'TG': '–¢–æ–≥–æ',
    'TK': '–¢–æ–∫–µ–ª–∞—É',
    'TO': '–¢–æ–Ω–≥–∞',
    'TT': '–¢—Ä–∏–Ω–∏–¥–∞–¥ –∏ –¢–æ–±–∞–≥–æ',
    'TN': '–¢—É–Ω–∏—Å',
    'TR': '–¢—É—Ä—Ü–∏—è',
    'TM': '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω',
    'TC': '–û—Å—Ç—Ä–æ–≤–∞ –¢–µ—Ä–∫—Å –∏ –ö–∞–π–∫–æ—Å',
    'TV': '–¢—É–≤–∞–ª—É',
    'UG': '–£–≥–∞–Ω–¥–∞',
    'UA': '–£–∫—Ä–∞–∏–Ω–∞',
    'AE': '–û–ê–≠',
    'GB': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
    'US': '–°–®–ê',
    'UM': '–í–Ω–µ—à–Ω–∏–µ –º–∞–ª—ã–µ –æ-–≤–∞ (–°–®–ê)',
    'UY': '–£—Ä—É–≥–≤–∞–π',
    'UZ': '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
    'VU': '–í–∞–Ω–∞—É—Ç—É',
    'VE': '–í–µ–Ω–µ—Å—É—ç–ª–∞',
    'VN': '–í—å–µ—Ç–Ω–∞–º',
    'VG': '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
    'VI': '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
    'WF': '–æ—Å—Ç—Ä–æ–≤–∞ –£–æ–ª–ª–∏—Å –∏ –§—É—Ç—É–Ω–∞',
    'EH': '–ó–∞–ø–∞–¥–Ω–∞—è –°–∞—Ö–∞—Ä–∞',
    'YE': '–ô–µ–º–µ–Ω',
    'ZM': '–ó–∞–º–±–∏—è',
    'ZW': '–ó–∏–º–±–∞–±–≤–µ',
    "AX": "–ê–ª–∞–Ω–¥—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞",
}

COUNTRY_CODE_TO_FLAG = {
    'AF': 'üá¶üá´',
    'AL': 'üá¶üá±',
    'DZ': 'üá©üáø',
    'AS': 'üá¶üá∏',
    'AD': 'üá¶üá©',
    'AO': 'üá¶üá¥',
    'AI': 'üá¶üáÆ',
    'AQ': 'üá¶üá∂',
    'AG': 'üá¶üá¨',
    'AR': 'üá¶üá∑',
    'AM': 'üá¶üá≤',
    'AW': 'üá¶üáº',
    'AU': 'üá¶üá∫',
    'AT': 'üá¶üáπ',
    'AZ': 'üá¶üáø',
    'BS': 'üáßüá∏',
    'BH': 'üáßüá≠',
    'BD': 'üáßüá©',
    'BB': 'üáßüáß',
    'BY': 'üáßüáæ',
    'BE': 'üáßüá™',
    'BZ': 'üáßüáø',
    'BJ': 'üáßüáØ',
    'BM': 'üáßüá≤',
    'BT': 'üáßüáπ',
    'BO': 'üáßüá¥',
    'BQ': 'üáßüá∂',
    'BA': 'üáßüá¶',
    'BW': 'üáßüáº',
    'BV': 'üáßüáª',
    'BR': 'üáßüá∑',
    'IO': 'üáÆüá¥',
    'BN': 'üáßüá≥',
    'BG': 'üáßüá¨',
    'BF': 'üáßüá´',
    'BI': 'üáßüáÆ',
    'KH': 'üá∞üá≠',
    'CM': 'üá®üá≤',
    'CA': 'üá®üá¶',
    'CV': 'üá®üáª',
    'KY': 'üá∞üáæ',
    'CF': 'üá®üá´',
    'TD': 'üáπüá©',
    'CL': 'üá®üá±',
    'CN': 'üá®üá≥',
    'CX': 'üá®üáΩ',
    'CC': 'üá®üá®',
    'CO': 'üá®üá¥',
    'KM': 'üá∞üá≤',
    'CG': 'üá®üá¨',
    'CD': 'üá®üá©',
    'CK': 'üá®üá∞',
    'CR': 'üá®üá∑',
    'HR': 'üá≠üá∑',
    'CU': 'üá®üá∫',
    'CW': 'üá®üáº',
    'CY': 'üá®üáæ',
    'CZ': 'üá®üáø',
    'CI': 'üá®üáÆ',
    'DK': 'üá©üá∞',
    'DJ': 'üá©üáØ',
    'DM': 'üá©üá≤',
    'DO': 'üá©üá¥',
    'EC': 'üá™üá®',
    'EG': 'üá™üá¨',
    'SV': 'üá∏üáª',
    'GQ': 'üá¨üá∂',
    'ER': 'üá™üá∑',
    'EE': 'üá™üá™',
    'ET': 'üá™üáπ',
    'FK': 'üá´üá∞',
    'FO': 'üá´üá¥',
    'FJ': 'üá´üáØ',
    'FI': 'üá´üáÆ',
    'FR': 'üá´üá∑',
    'GF': 'üá¨üá´',
    'PF': 'üáµüá´',
    'TF': 'üáπüá´',
    'GA': 'üá¨üá¶',
    'GM': 'üá¨üá≤',
    'GE': 'üá¨üá™',
    'DE': 'üá©üá™',
    'GH': 'üá¨üá≠',
    'GI': 'üá¨üáÆ',
    'GR': 'üá¨üá∑',
    'GL': 'üá¨üá±',
    'GD': 'üá¨üá©',
    'GP': 'üá¨üáµ',
    'GU': 'üá¨üá∫',
    'GT': 'üá¨üáπ',
    'GG': 'üá¨üá¨',
    'GN': 'üá¨üá≥',
    'GW': 'üá¨üáº',
    'GY': 'üá¨üáæ',
    'HT': 'üá≠üáπ',
    'HM': 'üá≠üá≤',
    'VA': 'üáªüá¶',
    'HN': 'üá≠üá≥',
    'HK': 'üá≠üá∞',
    'HU': 'üá≠üá∫',
    'IS': 'üáÆüá∏',
    'IN': 'üáÆüá≥',
    'ID': 'üáÆüá©',
    'IR': 'üáÆüá∑',
    'IQ': 'üáÆüá∂',
    'IE': 'üáÆüá™',
    'IM': 'üáÆüá≤',
    'IL': 'üáÆüá±',
    'IT': 'üáÆüáπ',
    'JM': 'üáØüá≤',
    'JP': 'üáØüáµ',
    'JE': 'üáØüá™',
    'JO': 'üáØüá¥',
    'KZ': 'üá∞üáø',
    'KE': 'üá∞üá™',
    'KI': 'üá∞üáÆ',
    'KP': 'üá∞üáµ',
    'KR': 'üá∞üá∑',
    'KW': 'üá∞üáº',
    'KG': 'üá∞üá¨',
    'LA': 'üá±üá¶',
    'LV': 'üá±üáª',
    'LB': 'üá±üáß',
    'LS': 'üá±üá∏',
    'LR': 'üá±üá∑',
    'LY': 'üá±üáæ',
    'LI': 'üá±üáÆ',
    'LT': 'üá±üáπ',
    'LU': 'üá±üá∫',
    'MO': 'üá≤üá¥',
    'MK': 'üá≤üá∞',
    'MG': 'üá≤üá¨',
    'MW': 'üá≤üáº',
    'MY': 'üá≤üáæ',
    'MV': 'üá≤üáª',
    'ML': 'üá≤üá±',
    'MT': 'üá≤üáπ',
    'MH': 'üá≤üá≠',
    'MQ': 'üá≤üá∂',
    'MR': 'üá≤üá∑',
    'MU': 'üá≤üá∫',
    'YT': 'üáæüáπ',
    'MX': 'üá≤üáΩ',
    'FM': 'üá´üá≤',
    'MD': 'üá≤üá©',
    'MC': 'üá≤üá®',
    'MN': 'üá≤üá≥',
    'ME': 'üá≤üá™',
    'MS': 'üá≤üá∏',
    'MA': 'üá≤üá¶',
    'MZ': 'üá≤üáø',
    'MM': 'üá≤üá≤',
    'NA': 'üá≥üá¶',
    'NR': 'üá≥üá∑',
    'NP': 'üá≥üáµ',
    'NL': 'üá≥üá±',
    'NC': 'üá≥üá®',
    'NZ': 'üá≥üáø',
    'NI': 'üá≥üáÆ',
    'NE': 'üá≥üá™',
    'NG': 'üá≥üá¨',
    'NU': 'üá≥üá∫',
    'NF': 'üá≥üá´',
    'MP': 'üá≤üáµ',
    'NO': 'üá≥üá¥',
    'OM': 'üá¥üá≤',
    'PK': 'üáµüá∞',
    'PW': 'üáµüáº',
    'PS': 'üáµüá∏',
    'PA': 'üáµüá¶',
    'PG': 'üáµüá¨',
    'PY': 'üáµüáæ',
    'PE': 'üáµüá™',
    'PH': 'üáµüá≠',
    'PN': 'üáµüá≥',
    'PL': 'üáµüá±',
    'PT': 'üáµüáπ',
    'PR': 'üáµüá∑',
    'QA': 'üá∂üá¶',
    'RO': 'üá∑üá¥',
    'RU': 'üá∑üá∫',
    'RW': 'üá∑üáº',
    'RE': 'üá∑üá™',
    'BL': 'üáßüá±',
    'SH': 'üá∏üá≠',
    'KN': 'üá∞üá≥',
    'LC': 'üá±üá®',
    'MF': 'üá≤üá´',
    'PM': 'üáµüá≤',
    'VC': 'üáªüá®',
    'WS': 'üáºüá∏',
    'SM': 'üá∏üá≤',
    'ST': 'üá∏üáπ',
    'SA': 'üá∏üá¶',
    'SN': 'üá∏üá≥',
    'RS': 'üá∑üá∏',
    'SC': 'üá∏üá®',
    'SL': 'üá∏üá±',
    'SG': 'üá∏üá¨',
    'SX': 'üá∏üáΩ',
    'SK': 'üá∏üá∞',
    'SI': 'üá∏üáÆ',
    'SB': 'üá∏üáß',
    'SO': 'üá∏üá¥',
    'ZA': 'üáøüá¶',
    'GS': 'üá¨üá∏',
    'SS': 'üá∏üá∏',
    'ES': 'üá™üá∏',
    'LK': 'üá±üá∞',
    'SD': 'üá∏üá©',
    'SR': 'üá∏üá∑',
    'SJ': 'üá∏üáØ',
    'SZ': 'üá∏üáø',
    'SE': 'üá∏üá™',
    'CH': 'üá®üá≠',
    'SY': 'üá∏üáæ',
    'TW': 'üáπüáº',
    'TJ': 'üáπüáØ',
    'TZ': 'üáπüáø',
    'TH': 'üáπüá≠',
    'TL': 'üáπüá±',
    'TG': 'üáπüá¨',
    'TK': 'üáπüá∞',
    'TO': 'üáπüá¥',
    'TT': 'üáπüáπ',
    'TN': 'üáπüá≥',
    'TR': 'üáπüá∑',
    'TM': 'üáπüá≤',
    'TC': 'üáπüá®',
    'TV': 'üáπüáª',
    'UG': 'üá∫üá¨',
    'UA': 'üá∫üá¶',
    'AE': 'üá¶üá™',
    'GB': 'üá¨üáß',
    'US': 'üá∫üá∏',
    'UM': 'üá∫üá≤',
    'UY': 'üá∫üáæ',
    'UZ': 'üá∫üáø',
    'VU': 'üáªüá∫',
    'VE': 'üáªüá™',
    'VN': 'üáªüá≥',
    'VG': 'üáªüá¨',
    'VI': 'üáªüáÆ',
    'WF': 'üáºüá´',
    'EH': 'üá™üá≠',
    'YE': 'üáæüá™',
    'ZM': 'üáøüá≤',
    'ZW': 'üáøüáº',
    "AX": 'üá¶üáΩ',
}

@dataclass
class Reminder:
    id: int
    date: int
    text: str
    active: bool = True

class NewReminderState(StatesGroup):
    text = State()
    date = State()

class TimeUnit(Enum):
    YEAR = 1
    MONTH = 2
    DAY = 3
    HOUR = 4
    MINUTE = 5
    SECOND = 6

class ReminderAction(str, Enum):
    DELETE_COMPLETED = "delete_completed"

class ReminderCallback(CallbackData, prefix="reminder"):
    action: ReminderAction

REMINDERS: dict[int, list[Reminder]] = {}

WEATHER_COMMAND = BotCommand(command="weather", description="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
RPS_COMMAND = BotCommand(command="rps", description="–°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞")
REMINDERS_COMMAND = BotCommand(command="reminders", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
REMINDER_COMMAND = BotCommand(command="reminder", description="–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
CANCEL_COMMAND = BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

ALL_COMMANDS = [
    WEATHER_COMMAND,
    RPS_COMMAND,
    REMINDERS_COMMAND,
    REMINDER_COMMAND,
    CANCEL_COMMAND
]

START_MESSAGE = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è –í–°–† 2.5 –ø–æ —É—á–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ 1 –∫—É—Ä—Å–∞ –≤ –†–ì–ü–£ –∏–º. –ì–µ—Ä—Ü–µ–Ω–∞.

–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /weather
    - –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /rps
    - –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /reminder
    
–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ù–∞–ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    /reminders - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""

owm = OWM(OWM_TOKEN, config=OWM_CONFIG)
mgr = owm.weather_manager()

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="html"))
dp = Dispatcher()
reminder_router = Router()

def get_word_case(count: int, words: list[str]) -> str:
    ONE = 0
    FEW = 1
    OTHER = 2
    
    if (count % 10 == 1) and not (count % 100 == 11):
        return words[ONE]
    
    if (count % 100) > 11 and (count % 100) <= 15:
        return words[OTHER]
    
    if (count % 10 >= 2) and (count % 10 <= 4):
        return words[FEW]
    
    return words[OTHER]

def create_reminders_db(chat_id: int) -> None:
    database_file = f"./databases/{chat_id}.db"
    
    if os.path.exists(database_file):
        os.remove(database_file)
    
    with sqlite3.connect(database_file) as conn:
        conn.execute("CREATE TABLE Reminders (id INTEGER PRIMARY KEY AUTOINCREMENT, expires_in INTEGER, content TEXT)")

def add_reminder(chat_id: int, text: str, date: int) -> None:
    database_file = f"./databases/{chat_id}.db"
    
    with sqlite3.connect(database_file) as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO Reminders (expires_in, content) VALUES (?, ?)", (date, text))
        
        if not chat_id in REMINDERS:
            REMINDERS[chat_id] = []
        
        REMINDERS[chat_id].append(Reminder(cur.lastrowid, date, text))

def get_reminders(chat_id: int) -> list[Reminder]:
    database_file = f"./databases/{chat_id}.db"
    
    now = datetime.now()
    timestamp = calendar.timegm(now.timetuple())
    
    result = None
    with sqlite3.connect(database_file) as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM Reminders")
        result = cur.fetchall()
        
    def row_to_reminder(row: list[Any]) -> Reminder:
        id = int(row[0])
        date = int(row[1])
        text = str(row[2])
        active = timestamp < date
        
        return Reminder(id, date, text, active)
    
    return list(map(row_to_reminder, result))

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await asyncio.to_thread(create_reminders_db, message.chat.id)
    await message.answer(START_MESSAGE)

@dp.message(Command(WEATHER_COMMAND))
async def command_weather_handler(message: Message, command: CommandObject) -> None:
    if command.args is None or command.args.isspace():
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /weather –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
        return
    
    try:
        observation = mgr.weather_at_place(command.args)
    except OwmNotFoundError:
        await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω :(")
        return
    
    w: Weather = observation.weather
    l: Location = observation.location
    
    detailed_status: str = w.detailed_status
    country_name = COUNTRY_CODE_TO_COUNTRY_NAME[l.country]
    temperature = w.temperature(unit="celsius")
    temp = int(round(temperature["temp"]))
    temp_max = int(round(temperature["temp_max"]))
    temp_min = int(round(temperature["temp_min"]))
    feels_like = int(round(temperature["feels_like"]))
    humidity = w.humidity
    
    wind = w.wind()
    wind_speed = wind["speed"]
    
    flag = COUNTRY_CODE_TO_FLAG[l.country]
    
    await message.answer(f"–ú–µ—Å—Ç–æ: <b>{l.name}, {country_name} {flag}</b>\n–ü–æ–≥–æ–¥–∞: <b>{detailed_status.capitalize()}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp} ¬∞C</b>\n–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_max} ¬∞C</b>\n–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_min} ¬∞C</b>\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>{feels_like} ¬∞C</b>\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{humidity}%</b>\n–í–µ—Ç–µ—Ä: <b>{wind_speed} –º/c</b>")

def get_current_reminders_text(reminders: list[Reminder]) -> str | None:
    if len(reminders) == 0:
        return None
    
    text = "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
    for i, reminder in enumerate(reminders, start=1):
        date = datetime.fromtimestamp(reminder.date, UTC).strftime("%H:%M, %d/%m/%Y")
        status = '\u231B' if reminder.active else '\u2705'
        text += f"{i}. {status} [{date}] {reminder.text}\n\n"
    return text

@dp.message(Command(REMINDERS_COMMAND))
async def command_reminders_handler(message: Message) -> None:
    reminders = await asyncio.to_thread(get_reminders, message.chat.id)
    if len(reminders) == 0:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    text = get_current_reminders_text(reminders)
    
    completed_present = any(not reminder.active for reminder in reminders)
    
    reply_markup = None
    if completed_present:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=ReminderCallback(action=ReminderAction.DELETE_COMPLETED).pack())
        reply_markup = keyboard.as_markup()
    
    await message.answer(text, reply_markup=reply_markup)

def delete_completed_reminders(chat_id: int) -> int:
    database_file = f"./databases/{chat_id}.db"
    
    reminders = REMINDERS[chat_id]
    
    deleted_count = 0
    
    with sqlite3.connect(database_file) as conn:
        for i in reversed(range(len(reminders))):
            reminder = reminders[i]
            if reminder.active: continue
            del reminders[i]
            
            conn.execute("DELETE FROM Reminders WHERE id = ?", (reminder.id,))
            deleted_count += 1
            
        conn.commit()
        
    return deleted_count
        

@dp.callback_query(ReminderCallback.filter(F.action == ReminderAction.DELETE_COMPLETED))
async def handle_delete_completed_reminders(query: CallbackQuery, callback_data: ReminderCallback, bot: Bot) -> None:
    action = callback_data.action
    
    chat_id = query.from_user.id
    
    if action == ReminderAction.DELETE_COMPLETED:
        reminders = REMINDERS[chat_id]
        
        if len(reminders) > 0:
            deleted_count = await asyncio.to_thread(delete_completed_reminders, chat_id)
            
            word = get_word_case(deleted_count, ("–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
            
            new_text = f"–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ {deleted_count} {word}.\n"
            
            reminders_text = get_current_reminders_text(reminders)
            
            new_text += reminders_text if reminders_text else "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
            
            await query.message.delete_reply_markup()
            await query.message.edit_text(new_text)
        else:
            await query.message.answer(f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    
    await query.answer()

@reminder_router.message(Command(CANCEL_COMMAND))
@reminder_router.message(F.text.casefold() == "cancel")
async def new_reminder_cancel(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.", reply_markup=ReplyKeyboardRemove())
        return
    
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

@reminder_router.message(Command(REMINDER_COMMAND))
async def command_new_reminder_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    
    await state.set_state(NewReminderState.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=ReplyKeyboardRemove())
    
@reminder_router.message(NewReminderState.text)
async def new_reminder_text(message: Message, state: FSMContext) -> None:
    await state.update_data(text=message.text)
    await state.set_state(NewReminderState.date)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ß–ß:–ú–ú –î–î/–ú–ú/–ì–ì–ì–ì</b>\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n<i>–î–∞—Ç–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å</i>")

@reminder_router.message(NewReminderState.date)
async def new_reminder_date(message: Message, state: FSMContext) -> None:
    example_date = "10:20 23/12/2025"
    
    date_time = message.text.split(" ")
    if len(date_time) == 0:
        await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
        return
    
    t = date_time[0].split(":")
    if len(t) != 2:
        await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
        return
    
    try:
        hours = int(t[0])
    except ValueError:
        await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
        return
    
    if hours >= 24:
        await message.answer(f"–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 24.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
        return
    
    if hours < 0:
        await message.answer(f"–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
        return
    
    try:
        minutes = int(t[1])
    except ValueError:
        await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
        return
    
    if minutes >= 60:
        await message.answer(f"–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–Ω—å—à–µ 60.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
        return
    
    if minutes < 0:
        await message.answer(f"–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
        return
    
    today = datetime.today()
    
    day = today.day
    month = today.month
    year = today.year
    
    if len(date_time) > 1:
        d = date_time[1].split('/')
        if len(d) != 3:
            await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
            return

        try:
            day = int(d[0])
        except ValueError:
            await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
            return
        
        if day < 0:
            await message.answer(f"–î–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ <b>–Ω—É–ª—è</b>.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
            return
        
        try:
            month = int(d[1])
        except ValueError:
            await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
            return
        
        if not 1 <= month <= 12:
            await message.answer(f"–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç <b>1</b> –¥–æ <b>12</b>.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
            return
        
        try:
            year = int(d[2])
        except ValueError:
            await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
            return
        
        _, max_days = calendar.monthrange(year, month)
        
        if day > max_days:
            await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ - <b>{max_days}</b>, –∞ –Ω–µ <b>{day}</b>.\n–ü—Ä–∏–º–µ—Ä: <b>{example_date}</b>")
            return
        
    now = datetime.now()
    now_timestamp = calendar.timegm(now.timetuple())
        
    date = datetime(year, month, day, hours, minutes)
    timestamp = calendar.timegm(date.timetuple())
    
    if timestamp < now_timestamp:
        await message.answer(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return
    
    data = await state.update_data(date=timestamp)
    
    await asyncio.to_thread(add_reminder, message.chat.id, data['text'], data['date'])

    diff_date = relativedelta(date, now)
    
    time_values = (
        (diff_date.years, TimeUnit.YEAR),
        (diff_date.months, TimeUnit.MONTH),
        (diff_date.days, TimeUnit.DAY),
        (diff_date.hours, TimeUnit.HOUR),
        (diff_date.minutes, TimeUnit.MINUTE),
        (diff_date.seconds, TimeUnit.SECOND)
    )
    
    add_comma = False
    notifies_in = ""
    for value, unit in time_values:
        if unit != TimeUnit.SECOND and value <= 0: continue
        
        if add_comma: notifies_in += ", "
        add_comma = True
        notifies_in += f"{value} "
        cases: tuple[str, str, str] = None
        match unit:
            case TimeUnit.YEAR: cases = ("–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç")
            case TimeUnit.MONTH: cases = ("–º–µ—Å—è—Ü", "–º–µ—Å—è—Ü–∞", "–º–µ—Å—è—Ü–µ–≤")
            case TimeUnit.DAY: cases = ("–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
            case TimeUnit.HOUR: cases = ("—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤")
            case TimeUnit.MINUTE: cases = ("–º–∏–Ω—É—Ç—É", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç")
            case TimeUnit.SECOND: cases = ("—Å–µ–∫—É–Ω–¥—É", "—Å–µ–∫—É–Ω–¥—ã", "—Å–µ–∫—É–Ω–¥")
        notifies_in += get_word_case(value, cases)
    notifies_in += '.'
    
    await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ–± —ç—Ç–æ–º —á–µ—Ä–µ–∑ <b>{notifies_in}</b>")

    await state.clear()

async def check_reminders_expiration() -> None:
    now = datetime.now()
    timestamp = calendar.timegm(now.timetuple())
    
    for chat_id, reminders in REMINDERS.items():
        for reminder in reminders:
            if reminder.active and timestamp > reminder.date:
                reminder.active = False
                
                date = datetime.fromtimestamp(reminder.date, UTC).strftime("%H:%M, %d/%m/%Y")
                await bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{reminder.text}\n\n{date}")

class RpsVariant(Enum):
    ROCK = 1
    PAPER = 2
    SCISSORS = 3
    
    def from_name(name: str) -> Self | None:
        match name:
            case "–∫–∞–º–µ–Ω—å": return RpsVariant.ROCK
            case "–±—É–º–∞–≥–∞": return RpsVariant.PAPER
            case "–Ω–æ–∂–Ω–∏—Ü—ã": return RpsVariant.SCISSORS
            case _: return None
    
    @property
    def name(self) -> str:
        match self:
            case RpsVariant.ROCK: return "–∫–∞–º–µ–Ω—å"
            case RpsVariant.PAPER: return "–±—É–º–∞–≥–∞"
            case RpsVariant.SCISSORS: return "–Ω–æ–∂–Ω–∏—Ü—ã"
            
    @property
    def name_acusative(self) -> str:
        match self:
            case RpsVariant.ROCK: return "–∫–∞–º–µ–Ω—å"
            case RpsVariant.PAPER: return "–±—É–º–∞–≥—É"
            case RpsVariant.SCISSORS: return "–Ω–æ–∂–Ω–∏—Ü—ã"

RPS_VARIANTS = [RpsVariant.ROCK, RpsVariant.PAPER, RpsVariant.SCISSORS]

RPS_MAP = {
    RpsVariant.ROCK: RpsVariant.SCISSORS,
    RpsVariant.PAPER: RpsVariant.ROCK,
    RpsVariant.SCISSORS: RpsVariant.PAPER
}

@dp.message(Command(RPS_COMMAND))
async def command_rps_handler(message: Message, command: CommandObject) -> None:
    if not command.args or command.args.isspace():
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /rps –∫–∞–º–µ–Ω—å")
        return
    
    user_variant = RpsVariant.from_name(command.args.lower())
    
    if user_variant is None:
        await message.answer(f"–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç.\n–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {RpsVariant.ROCK.name}, {RpsVariant.SCISSORS.name}, {RpsVariant.PAPER.name}.")
        return
    
    variant = random.choice(RPS_VARIANTS)
    
    if RPS_MAP.get(user_variant) == variant:
        await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –Ø –≤—ã–±—Ä–∞–ª <b>{variant.name_acusative}</b>.")
    elif RPS_MAP.get(variant) == user_variant:
        await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –Ø –≤—ã–±—Ä–∞–ª <b>{variant.name_acusative}</b>.")
    else:
        await message.answer(f"–ù–∏—á—å—è! –Ø –≤—ã–±—Ä–∞–ª <b>{variant.name_acusative}</b>.")

def load_all_reminders() -> None:
    now = datetime.now()
    timestamp = calendar.timegm(now.timetuple())
    
    for address, _, files in os.walk("./databases/"):
        for name in files:
            chat_id = int(name[:-3])
            path = os.path.join(address, name)
            
            result = None
            with sqlite3.connect(path) as conn:
                cur = conn.cursor()
                cur.execute("SELECT * FROM Reminders")
                result = cur.fetchall()
                
                reminders: list[Reminder] = []
                for id, date, text in result:
                    active = timestamp < date
                    reminders.append(Reminder(id, date, text, active=active))
                REMINDERS[chat_id] = reminders

async def main() -> None:
    await bot.set_my_commands(commands=ALL_COMMANDS)
    
    dp.include_router(reminder_router)
    
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_reminders_expiration, IntervalTrigger(seconds=10))
    scheduler.start()
    
    logging.getLogger('apscheduler.executors.default').setLevel(logging.WARNING)
    
    await dp.start_polling(bot)
    
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    load_all_reminders()
    asyncio.run(main())